export { createInstance } from './react-native-client';
export declare const add: (plugin: Types.Plugin<Types.ReactNativeClient, Types.ReactNativeConfig>) => Types.AmplitudeReturn<void>, flush: () => Types.AmplitudeReturn<void>, getDeviceId: () => string | undefined, getSessionId: () => number | undefined, getUserId: () => string | undefined, groupIdentify: (groupType: string, groupName: string | string[], identify: Types.Identify, eventOptions?: Types.EventOptions | undefined) => Types.AmplitudeReturn<Types.Result>, identify: (identify: Types.Identify, eventOptions?: Types.EventOptions | undefined) => Types.AmplitudeReturn<Types.Result>, init: (apiKey: string, userId?: string | undefined, options?: Types.ReactNativeOptions | undefined) => Types.AmplitudeReturn<void>, logEvent: (eventInput: string | Types.BaseEvent, eventProperties?: Record<string, any> | undefined, eventOptions?: Types.EventOptions | undefined) => Types.AmplitudeReturn<Types.Result>, remove: (pluginName: string) => Types.AmplitudeReturn<void>, reset: () => void, revenue: (revenue: Types.Revenue, eventOptions?: Types.EventOptions | undefined) => Types.AmplitudeReturn<Types.Result>, setDeviceId: (deviceId: string) => void, setGroup: (groupType: string, groupName: string | string[], eventOptions?: Types.EventOptions | undefined) => Types.AmplitudeReturn<Types.Result>, setOptOut: (optOut: boolean) => void, setSessionId: (sessionId: number) => void, setUserId: (userId: string | undefined) => void, track: (eventInput: string | Types.BaseEvent, eventProperties?: Record<string, any> | undefined, eventOptions?: Types.EventOptions | undefined) => Types.AmplitudeReturn<Types.Result>;
export { Revenue, Identify } from '@amplitude/analytics-core';
import * as Types from '@amplitude/analytics-types';
export { Types };
//# sourceMappingURL=index.d.ts.map